apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.ttp.sunshine_kotlin"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"

    compile "com.github.ybq:Android-SpinKit:$spinkit_version"
    compile 'com.google.code.gson:gson:2.8.2'
    compile "com.squareup.retrofit2:retrofit:$retrofit2_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    testImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit2_version"
    androidTestImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit2_version"

    compile "android.arch.persistence.room:runtime:$arch_version"
    annotationProcessor "android.arch.persistence.room:compiler:$arch_version"
    kapt "android.arch.persistence.room:compiler:$arch_version"

    compile "android.arch.lifecycle:runtime:$arch_lifecycle_runtime_version"
    compile "android.arch.lifecycle:extensions:$arch_version"
    annotationProcessor "android.arch.lifecycle:compiler:$arch_version"
    kapt "android.arch.lifecycle:compiler:$arch_version"
    testImplementation "android.arch.core:core-testing:$arch_version"

    compile "com.google.dagger:dagger-android:$dagger_version"
    compile "com.google.dagger:dagger-android-support:$dagger_version" // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    compile "org.jetbrains.anko:anko-coroutines:$anko_version"

    kapt 'com.android.databinding:compiler:3.0.1'

    testImplementation "junit:junit:$junit_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"
    // Optional -- Mockito framework
    testImplementation "org.mockito:mockito-core:$mockito_version"

    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "com.android.support.test:runner:$support_test_version"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation "android.arch.core:core-testing:$arch_version"
}
